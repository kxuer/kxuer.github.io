(window.webpackJsonp=window.webpackJsonp||[]).push([[77],{403:function(e,t,a){"use strict";a.r(t);var n=a(4),s=Object(n.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("p",[e._v("在嵌入式设备中也叫"),t("strong",[e._v("bootloader")]),e._v("。"),t("a",{attrs:{href:"https://www.bilibili.com/video/BV1wG4y197kq",target:"_blank",rel:"noopener noreferrer"}},[e._v("bilibili"),t("OutboundLink")],1)]),e._v(" "),t("ol",[t("li",[e._v("一般存储在闪存中")]),e._v(" "),t("li",[e._v("开机时，先将BIOS程序加载到内存中，再交由CPU执行")]),e._v(" "),t("li",[e._v("初始化、检查各种硬件：开机自检")]),e._v(" "),t("li",[e._v("从扩展系统配置数据（ESCD，存储在NVRAM）获取如何执行相关操作的信息")]),e._v(" "),t("li",[e._v("加载操作系统内核并运行，后面由操作系统接管")]),e._v(" "),t("li",[e._v("提供shell和菜单：\n"),t("ul",[t("li",[e._v("菜单用于选择加载哪个操作系统。")]),e._v(" "),t("li",[e._v("shell包含一些命令，如从本地存储或网络中加载数据、检查内存、进行硬件测试/检查。")])])])]),e._v(" "),t("p",[e._v("以前的BIOS启动（2006之前）：")]),e._v(" "),t("ul",[t("li",[e._v("分为两阶段：![[Pasted image 20230228214613.png]]\n"),t("ul",[t("li",[e._v("阶段一：最多只能包含446字节的代码，通常用于加载第二阶段的代码。")]),e._v(" "),t("li",[e._v("阶段二：可包含更大点的代码，通常用于从"),t("em",[e._v("文件系统")]),e._v("中加载"),t("em",[e._v("内核镜像")]),e._v("并运行。")])])]),e._v(" "),t("li",[e._v("外部存储：![[Pasted image 20230228214918.png]]")])]),e._v(" "),t("p",[e._v("2006之后，主要使用UEFI（Unified Extensible Firmware Interface）作为固件接口：![[Pasted image 20230228220224.png]]")]),e._v(" "),t("ul",[t("li",[e._v("UEFI：\n"),t("ul",[t("li",[e._v("UEFI描述了操作系统和固件之间的接口定义。")]),e._v(" "),t("li",[e._v("固件负责启动、固件给操作系统提供运行时服务。")]),e._v(" "),t("li",[e._v("存储在闪存中。")])])]),e._v(" "),t("li",[e._v("从EFI系统分区中加载二进制文件：通常是bootloader，或者包含EFI Boot Stub的Linux内核。")]),e._v(" "),t("li",[e._v("使用FAT文件系统格式化的特殊分区：MBR，GPT")]),e._v(" "),t("li",[e._v("/efi/boot/bootx32.efi, /efi/boot/bootx64.efi文件![[Pasted image 20230228220329.png]]")])]),e._v(" "),t("p",[e._v("ACPI（Advanced Configuration and Power Interface）：")]),e._v(" "),t("ul",[t("li",[e._v("开发标准，操作系统用其发现和配置计算机硬件、管理电源、自动配置、状态监控。")]),e._v(" "),t("li",[e._v("包含无法在运行时自动被发现的硬件的描述表。")]),e._v(" "),t("li",[e._v("包含固件（UEFI或以前的）提供的表，可被操作系统所使用。")])]),e._v(" "),t("blockquote",[t("p",[e._v("UEFI 和 ACPI主要用在x86平台，ARM中还没普及。")])]),e._v(" "),t("p",[e._v("嵌入式平台启动过程：")]),e._v(" "),t("ul",[t("li",[e._v("ROM代码：\n"),t("ul",[t("li",[e._v("由处理器厂商编写，其描述文档放在处理器datasheet。")]),e._v(" "),t("li",[e._v("负责从NAND/NOR闪存、或USB、或SD卡、或eMMC等等存储中找到bootloader、并加载、运行它。")]),e._v(" "),t("li",[e._v("ROM代码运行时，通常外部的RAM还未初始化，因此只能加载bootloader到内部的SRAM，使得bootloader启动过程分为两个阶段：\n"),t("ul",[t("li",[e._v("阶段一：bootloader代码较少，运行在SRAM，对外部DRAM进行初始化。")]),e._v(" "),t("li",[e._v("阶段二：bootloader代码多，在外部DRAM加载运行。")])])]),e._v(" "),t("li",[e._v("示例"),t("a",{attrs:{href:"https://www.st.com/resource/en/application_note/dm00389996-getting-started-with-stm32mp151-stm32mp153-and-stm32mp157-line-hardware-development-stmicroelectronics.pdf",target:"_blank",rel:"noopener noreferrer"}},[e._v("STM32MP1: datasheet-7.1 Boot mode selection"),t("OutboundLink")],1),e._v("，"),t("a",{attrs:{href:"https://www.mouser.com/pdfdocs/spruh73h.pdf",target:"_blank",rel:"noopener noreferrer"}},[e._v("AM335x: datasheet-26.1.5 Booting"),t("OutboundLink")],1),e._v("：指定从哪个存储设备中加载bootloader。")]),e._v(" "),t("li",[e._v("恢复机制：主机通过UART或USB与嵌入式设备连接，并通过厂商提供的工具（如STM32MP1: STM32 Cube Programmer，NXP i.MX: uuu，Microchip AT91/SAM: SAM-BA，Allwinner: sunxi-fel等等）将bootloader重新写入嵌入式设备的存储设备中。![[Pasted image 20230301090511.png]]")])])]),e._v(" "),t("li",[e._v("两阶段启动流程：![[Pasted image 20230301085806.png]]")]),e._v(" "),t("li",[e._v("bootloader：\n"),t("ul",[t("li",[t("a",{attrs:{href:"https://www.gnu.org/software/grub/",target:"_blank",rel:"noopener noreferrer"}},[e._v("GRUB（Grand Unified Bootloader）"),t("OutboundLink")],1),e._v(" "),t("ul",[t("li",[e._v("x86平台中许多Linux发行版都采用。")]),e._v(" "),t("li",[e._v("支持x86 legacy和UEFI系统。")]),e._v(" "),t("li",[e._v("支持多种文件系统格式，以加载内核镜像、模块及配置。")]),e._v(" "),t("li",[e._v("提供菜单配置和shell。")]),e._v(" "),t("li",[e._v("支持从网络中加载内核镜像。")]),e._v(" "),t("li",[e._v("支持ARM, ARM64, RISC-V, PowerPC，只不过在这些平台上没那么流行GRUB。")])])]),e._v(" "),t("li",[t("a",{attrs:{href:"https://wiki.syslinux.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Syslinux"),t("OutboundLink")],1),e._v("：主要用于从网络或可移除设备中启动系统(USB key, SD card, CD-ROM)，难配置。\n"),t("ul",[t("li",[e._v("syslinux：从FAT文件系统中加载内核镜像并启动。")]),e._v(" "),t("li",[e._v("pxelinux：从网络中加载内核镜像并启动。")]),e._v(" "),t("li",[e._v("isolinux：从CD-ROM中加载内核镜像并启动。")]),e._v(" "),t("li",[e._v("extlinux：从各种文件系统中加载内核镜像并启动。")])])]),e._v(" "),t("li",[e._v("systemd-boot：比较simple，用作UEFI启动。")]),e._v(" "),t("li",[e._v("shim：最小的UEFI bootloader\n"),t("ul",[t("li",[e._v("主要用在安全启动领域。")]),e._v(" "),t("li",[e._v("可串联启动其他bootloader（如GRUB）或之间加载内核镜像，并校验签名。")])])]),e._v(" "),t("li",[t("a",{attrs:{href:"https://www.denx.de/wiki/U-Boot",target:"_blank",rel:"noopener noreferrer"}},[e._v("U-Boot"),t("OutboundLink")],1),e._v("：\n"),t("ul",[t("li",[e._v("在嵌入式架构中被广泛运用，如ARM, ARM64, RISC-V, PowerPC, MIPS等等。")]),e._v(" "),t("li",[e._v("也支持使用UEFI固件的x86平台。")])])]),e._v(" "),t("li",[e._v("Barebox：\n"),t("ul",[t("li",[e._v("多应用在嵌入式架构中。")]),e._v(" "),t("li",[e._v("作为U-Boot的备选，克服了U-Boot的缺点：使用kconfig、更好的"),t("em",[e._v("设备模型（device model）")]),e._v("、更多的shell接口。")]),e._v(" "),t("li",[e._v("支持的平台比U-Boot少。")])])])])]),e._v(" "),t("li",[e._v("可信固件：\n"),t("ul",[t("li",[e._v("特点：\n"),t("ul",[t("li",[e._v("由bootloader加载，bootloader启动OS后仍存在。")]),e._v(" "),t("li",[e._v("驻留在DDR中特定的位置或者特定的SRAM中，OS不可之间访问这些位置。")]),e._v(" "),t("li",[e._v("给OS提供服务。")]),e._v(" "),t("li",[e._v("也可以在普通OS之外运行安全的OS。")])])]),e._v(" "),t("li",[e._v("ARM：![[Pasted image 20230301100239.png]]\n"),t("ul",[t("li",[e._v("存在4个特权级(也叫Exception Levels)：\n"),t("ul",[t("li",[e._v("EL3：最高权限，运行安全固件。")]),e._v(" "),t("li",[e._v("EL2：通常由超管进行虚拟化时使用。")]),e._v(" "),t("li",[e._v("EL1：用来运行Linux内核。")]),e._v(" "),t("li",[e._v("EL0：用来运行用户空间程序。")])])]),e._v(" "),t("li",[e._v("存在2个世界：\n"),t("ul",[t("li",[e._v("常规世界：用来运行通用的操作系统，如Linux。")]),e._v(" "),t("li",[e._v("安全世界：用来运行隔离的、安全的操作系统和应用程序，"),t("em",[e._v("也叫TrustZone")]),e._v("。")])])]),e._v(" "),t("li",[e._v("EL3只存在于安全世界。")]),e._v(" "),t("li",[e._v("从ARMv8.4开始，EL2可以存在于安全世界和常规世界，之前只存在于常规世界。")]),e._v(" "),t("li",[e._v("EL1和EL0可以存在于安全世界和常规世界。")])])]),e._v(" "),t("li",[e._v("可信固件提供的接口：![[Pasted image 20230301101148.png]]\n"),t("ul",[t("li",[e._v("由ARM进行标准化。")]),e._v(" "),t("li",[e._v("由操作系统调用，应用程序可间接通过操作系统系统调用获取可信固件提供的服务。")]),e._v(" "),t("li",[e._v("PSCI（Power State Coordination Interface）、SCMI（System Control and Management Interface）：电源、系统管理接口。")])])]),e._v(" "),t("li",[e._v("Trusted Firmware-A (TF-A)：Armv7-A 和 Armv8-A中安全世界软件的参考实现。")]),e._v(" "),t("li",[t("a",{attrs:{href:"https://www.op-tee.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("OP-TEE"),t("OutboundLink")],1),e._v("：开源项目，运行在安全世界的可信操作系统，一些硬件资源只能被可信操作系统访问。")]),e._v(" "),t("li",[e._v("总结：ARM![[Pasted image 20230301102313.png]]")]),e._v(" "),t("li",[e._v("RISC-V：![[Pasted image 20230301103038.png]]\n"),t("ul",[t("li",[e._v("3种特权级别：\n"),t("ul",[t("li",[e._v("M-mode: 机器模式。")]),e._v(" "),t("li",[e._v("S-mode：内核在此模式运行。")]),e._v(" "),t("li",[e._v("U-mode：用户空间程序在此模式运行。")])])]),e._v(" "),t("li",[e._v("SBI（Supervisor Binary Interface）：内核与固件交互的接口，OpenSBI为其参考实现。")])])])])]),e._v(" "),t("li",[e._v("ARM平台的启动示例：\n"),t("ul",[t("li",[e._v("TI AM335x: ARMv7：![[Pasted image 20230301103836.png]]")]),e._v(" "),t("li",[e._v("NXP i.MX6: ARMv7：![[Pasted image 20230301104042.png]]")]),e._v(" "),t("li",[e._v("STM32MP1: ARMv7：![[Pasted image 20230301104247.png]]")]),e._v(" "),t("li",[e._v("Allwinner ARMv8 cores：![[Pasted image 20230301104417.png]]")])])])]),e._v(" "),t("p",[e._v("U-Boot：")]),e._v(" "),t("ul",[t("li",[e._v("是bootloader。")]),e._v(" "),t("li",[e._v("如何获取：\n"),t("ul",[t("li",[e._v("最好情况：硬件平台被官方支持，可从"),t("a",{attrs:{href:"https://gitlab.denx.de/u-boot/u-boot",target:"_blank",rel:"noopener noreferrer"}},[e._v("Git仓库"),t("OutboundLink")],1),e._v("下载。")]),e._v(" "),t("li",[e._v("一般：硬件厂商提供的U-Boot的定制化后的分支，翻看厂商的文档/SDK。")]),e._v(" "),t("li",[e._v("定制化的开发板：查看SoC厂商提供的U-Boot，并进行适配。")])])]),e._v(" "),t("li",[e._v("配置：\n"),t("ul",[t("li",[e._v("使用kconfig（历史遗留问题：有些开发板的配置一部分存放在include/configs/的头文件、一部分存放在"),t("em",[e._v("defconfig")]),e._v("文件中）")]),e._v(" "),t("li",[e._v("在configs/目录下包含支持的各平台的配置文件，如configs/stm32mp15_basic_defconfig。")]),e._v(" "),t("li",[e._v("可配置：CPU类型、需要的驱动、需要的U-Boot特性等等。")])])]),e._v(" "),t("li",[e._v("编译命令：")])]),e._v(" "),t("div",{staticClass:"language-shell line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[e._v("make")]),e._v(" BOARDNAME_defconfig   "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 加载某个开发板的配置，并存放到.config文件中")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("make")]),e._v(" menuconfig   "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 配置U-Boot")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("export")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t("span",{pre:!0,attrs:{class:"token environment constant"}},[e._v("PATH")])]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("/path/to/toolchain/bin:"),t("span",{pre:!0,attrs:{class:"token environment constant"}},[e._v("$PATH")]),e._v("   "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 设置交叉编译工具链的目录，以便Linux找到相关命令")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("make")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("CROSS_COMPILE")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("arm-linux-   "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 设置使用以arm-linux-为开头的交叉编译工具，编译U-Boot")]),e._v("\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br")])]),t("ul",[t("li",[e._v("最终得到的U-Boot镜像为u-boot.bin文件（根据平台、存储设备(NAND or MMC)的不同，可能还存在u-boot.img, u-boot.kwb...等镜像）")]),e._v(" "),t("li",[e._v("U-Boot SPL（Secondary Program Loader）：\n"),t("ul",[t("li",[e._v("第一阶段bootloader，很小。")]),e._v(" "),t("li",[e._v("通过menuconfig进行配置，可包含驱动。")]),e._v(" "),t("li",[e._v("一些平台上甚至还有TPL（Tertiary Program Loader）：TPL → SPL → main U-Boot")])])]),e._v(" "),t("li",[t("strong",[e._v("设备树（Device Tree）")]),e._v("：\n"),t("ul",[t("li",[e._v("一种用于描述硬件拓扑结构的"),t("em",[e._v("数据结构")]),e._v("。")]),e._v(" "),t("li",[e._v("让软件能够指定哪些硬件外设是可用的、且其是如何连接到系统的。")]),e._v(" "),t("li",[e._v("arch/ARCH/dts目录下的文件，通过"),t("code",[e._v("DEVICE_TREE")]),e._v("变量修改使用哪个设备树。")])])]),e._v(" "),t("li",[e._v("构建示例：\n"),t("ul",[t("li",[e._v("TI AM335x BeagleBoneBlack wireless："),t("div",{staticClass:"language-shell line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("export")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t("span",{pre:!0,attrs:{class:"token environment constant"}},[e._v("PATH")])]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("/path/to/toolchain/bin:"),t("span",{pre:!0,attrs:{class:"token environment constant"}},[e._v("$PATH")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("make")]),e._v(" am335x_evm_defconfig\n"),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("make")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("DEVICE_TREE")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("am335x-boneblack-wireless "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("CROSS_COMPILE")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("arm-linux-\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br")])]),t("ul",[t("li",[e._v("生成：MLO文件-U-Boot SPL；u-boot.img-第二阶段的U-Boot。")])])])])]),e._v(" "),t("li",[e._v("烧写U-Boot到闪存(NAND or eMMC)：根据硬件的不同有不同方法\n"),t("ul",[t("li",[e._v("如果ROM代码提供有特殊的启动监控，则可利用它通过使用某种协议的串口或USB进行烧写。")]),e._v(" "),t("li",[e._v("如果CPU先从可移动媒介(SD card)中启动（如果失败，才从某个固定媒介中启动），那么就可以把U-Boot烧写到可移动媒介(SD card)中。")]),e._v(" "),t("li",[e._v("如果U-Boot已安装，且可以自我更新，则自我更新即可。")]),e._v(" "),t("li",[e._v("如果开发板提供了JTAG接口，则可以远程烧写。")])])]),e._v(" "),t("li",[e._v("U-boot shell：\n"),t("ul",[t("li",[e._v("启动：把开发板通过serial console连接到主机，开启开发板电源即可。")]),e._v(" "),t("li",[e._v("help：查看可用的命令；version：U-boot版本；nand info-NAND闪存信息；mmc info-MMC信息；bdinfo-开发板信息。")])])]),e._v(" "),t("li",[e._v("U-Boot环境：运行时的配置信息，通过环境变量设置。\n"),t("ul",[t("li",[e._v("可存储在NAND闪存、MMC or USB存储、FAT or ext4分区中的文件、UBI卷、或者U-Boot镜像中未被覆盖的值。")])]),e._v(" "),t("div",{staticClass:"language-sh line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[e._v("printenv")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("printenv")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("variable-name"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\nsetenv "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("variable-name"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("variable-value"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 修改运行时的环境变量")]),e._v("\neditenv "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("variable-name"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\nsaveenv   "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 保存环境变量到非易失性设备中")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 其他：env default, env info, env erase, env set, env save, etc.")]),e._v("\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br")])]),t("ul",[t("li",[e._v("环境变量中可包含脚本：\n"),t("ul",[t("li",[e._v("脚本中可包含多条命令，用;分隔。")]),e._v(" "),t("li",[e._v("脚本中可包含："),t("code",[e._v("if command ; then ... ; else ... ; fi")])]),e._v(" "),t("li",[e._v("运行脚本："),t("code",[e._v("run <variable-name>")])])])])])]),e._v(" "),t("li",[e._v("U-Boot内存：\n"),t("ul",[t("li",[e._v("没有内存分配机制，需要自己指定RAM地址。")])]),e._v(" "),t("div",{staticClass:"language-sh line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[e._v("md "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v(".b, .w, .l, .q"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(" address "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# of objects]   # 查看指定内存地址中的值")]),e._v("\nmw "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v(".b, .w, .l, .q"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(" address value "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("count"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("    "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 指定内存地址写入值")]),e._v("\nmm "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v(".b, .w, .l, .q"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(" address                  "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 指定内存地址修改值")]),e._v("\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br")])])]),e._v(" "),t("li",[e._v("U-Boot直接操作裸存储设备：\n"),t("ul",[t("li",[e._v("nand read addr off|partition size")]),e._v(" "),t("li",[e._v("mmc read addr blk# cnt")]),e._v(" "),t("li",[e._v("usb read addr blk# cnt")])])]),e._v(" "),t("li",[e._v("U-Boot文件系统：支持多种文件系统\n"),t("ul",[t("li",[e._v("FAT: fatinfo, fatls, fatsize, fatload, fatwrite")]),e._v(" "),t("li",[e._v("ext2/3/4: ext2ls, ext4ls, ext2load, ext4load, ext4size, ext4write")]),e._v(" "),t("li",[e._v("Squashfs: sqfsls, sqfsload")]),e._v(" "),t("li",[e._v("加载文件："),t("code",[e._v("load <interface> [<dev[:part]> [<addr> [<filename> [bytes [pos]]]]]")])]),e._v(" "),t("li",[e._v("列出文件："),t("code",[e._v("ls <interface> [<dev[:part]> [directory]]")])]),e._v(" "),t("li",[e._v("获取文件大小："),t("code",[e._v("size <interface> <dev[:part]> <filename>")])])])]),e._v(" "),t("li",[e._v("U-Boot网络：\n"),t("ul",[t("li",[e._v("环境变量：ethaddr-MAC地址；ipaddr-IP地址；serverip-服务器IP地址。")]),e._v(" "),t("li",[e._v("ping: 可ping别的机器，但因为U-Boot没有多任务、中断功能，所以别的机器不能ping它。")]),e._v(" "),t("li",[e._v("tftp：使用TFTP协议加载文件。\n"),t("ul",[t("li",[e._v("TFTF协议与FTP协议类似，但没有认证功能，且使用UDP协议。")]),e._v(" "),t("li",[e._v("主机上安装TFTP服务："),t("code",[e._v("sudo apt install tftpd-hpa")]),e._v("，安装好后主机的/var/lib/tftpboot或/srv/tftp目录将可被发现。")]),e._v(" "),t("li",[e._v("使用U-Boot自带的tftp客户端：先配置好ipaddr, serverip, 和ethaddr环境变量，"),t("code",[e._v("tftp <address> <filename>")]),e._v("把文件加载到RAM的指定地址中。")])])]),e._v(" "),t("li",[e._v("dhcp：使用DHCP协议获取IP地址。")])])]),e._v(" "),t("li",[e._v("U-Boot启动命令：\n"),t("ul",[t("li",[e._v("启动内核镜像：\n"),t("ul",[t("li",[e._v("bootz → 启动ARM32 zImage镜像")]),e._v(" "),t("li",[e._v("booti → 启动ARM64 or RISC-V Image镜像")]),e._v(" "),t("li",[e._v("bootm → 启动带有U-Boot头的内核镜像")]),e._v(" "),t("li",[e._v("zboot → 启动x86 bzImage镜像")])])]),e._v(" "),t("li",[e._v("如"),t("code",[e._v("bootz [addr [initrd[:size]] [fdt]]")]),e._v("：\n"),t("ul",[t("li",[e._v("addr是内核镜像在RAM中的地址")]),e._v(" "),t("li",[e._v("initrd是initrd or initramfs的地址")]),e._v(" "),t("li",[e._v("fdt是设备树的地址，将被传递给Linux内核")])])]),e._v(" "),t("li",[e._v("重要的环境变量：\n"),t("ul",[t("li",[e._v("bootcmd：倒数计时到了之后有U-Boot自动执行的命令列表。")]),e._v(" "),t("li",[e._v("bootargs：Linux内核命令行。")])])])]),e._v(" "),t("div",{staticClass:"language-sh line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[e._v("STM32MP"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("ls")]),e._v(" mmc "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),e._v(":4 /boot\nSTM32MP"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" load mmc "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),e._v(":4 c0100000 /boot/zImage   "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 加载内核镜像")]),e._v("\nSTM32MP"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" load mmc "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),e._v(":4 c0000000 /boot/stm32mp157c-dk2.dtb   "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 加载设备树")]),e._v("\nSTM32MP"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" setenv bootargs "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("root")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("/dev/mmcblk0p4 rootwait "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 设置内核命令行")]),e._v("\nSTM32MP"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" bootz c0100000 - c0000000   "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 启动内核")]),e._v("\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br")])])]),e._v(" "),t("li",[e._v("FIT = Flat Image Tree：包含多个镜像的容器格式。")]),e._v(" "),t("li",[e._v("Generic Distro boot：标准化bootloader的行为。")])]),e._v(" "),t("p",[e._v("TF-A可信固件：")]),e._v(" "),t("ul",[t("li",[e._v("使用FIP（Firmware Image Package）打包格式打包固件镜像。")]),e._v(" "),t("li",[e._v("配置TF-A：在make命令中设置变量\n"),t("ul",[t("li",[e._v("CROSS_COMPILE，ARCH，ARM_ARCH_MAJOR......")])])]),e._v(" "),t("li",[e._v("示例：STM32MP1分区![[Pasted image 20230302094036.png]]")]),e._v(" "),t("li")])])}),[],!1,null,null,null);t.default=s.exports}}]);