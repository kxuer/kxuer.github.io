(window.webpackJsonp=window.webpackJsonp||[]).push([[83],{409:function(t,s,a){"use strict";a.r(s);var n=a(4),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[s("a",{attrs:{href:"https://www.freedesktop.org/wiki/Software/dbus/",target:"_blank",rel:"noopener noreferrer"}},[t._v("D-Bus"),s("OutboundLink")],1)]),t._v(" "),s("ul",[s("li",[t._v("面向消息的中间件机制，允许 在同一台机器上并发运行的多个进程 进行通信。")]),t._v(" "),s("li",[t._v("依赖daemon进程在应用之间传递消息。")]),t._v(" "),s("li",[t._v("主要被系统daemon用来给客户端应用提供服务。")]),t._v(" "),s("li",[t._v("例：一个以root身份运行的网络配置daemon，提供了一组D-Bus API，CLI和GUI可用其配置网络。![[Pasted image 20230307101553.png]]")]),t._v(" "),s("li",[t._v("多个总线：\n"),s("ul",[s("li",[t._v("一个系统总线：可被所有用户使用，来访问系统服务。")]),t._v(" "),s("li",[t._v("每个登录用户一个会话总线。")])])]),t._v(" "),s("li",[t._v("对象模型：接口、对象、函数、信号。")])]),t._v(" "),s("p",[t._v("systemd： ^8b4943")]),t._v(" "),s("ul",[s("li",[t._v("被几乎所有的Linux桌面/服务器发行版使用的init系统。")]),t._v(" "),s("li",[t._v("比Busybox的init更复杂，功能更强大。")]),t._v(" "),s("li",[t._v("只支持glibc，不支持uClibc 和 Musl。")]),t._v(" "),s("li",[t._v("提供以下特性：\n"),s("ul",[s("li",[t._v("考虑到依赖的同时，多个服务并行启动。")]),t._v(" "),s("li",[t._v("服务监控。")]),t._v(" "),s("li",[t._v("通过socket激活，按需启动服务。")]),t._v(" "),s("li",[t._v("服务的资源管理：CPU、内存限制。")])])]),t._v(" "),s("li",[t._v("使用unit文件进行配置，里面使用描述性语言。例/usr/lib/systemd/system/sshd.service"),s("div",{staticClass:"language-service line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("[Unit] \nDescription=OpenSSH server daemon \nDocumentation=man:sshd(8) man:sshd_config(5) \nAfter=network.target sshd-keygen.service \nWants=sshd-keygen.service \n\n[Service] \nEnvironmentFile=/etc/sysconfig/sshd \nExecStart=/usr/sbin/sshd -D $OPTIONS \nExecReload=/bin/kill -HUP $MAINPID \nKillMode=process \nRestart=on-failure \nRestartSec=42s \n\n[Install] \nWantedBy=multi-user.target\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br")])])]),t._v(" "),s("li",[t._v("还提供了：\n"),s("ul",[s("li",[t._v("journald：日志daemon，替代syslogd。\n"),s("ul",[s("li",[s("code",[t._v("journalctl -f")]),t._v("：打印最新的日志，并持续输出。")])])]),t._v(" "),s("li",[t._v("networkd：网络配置管理。")]),t._v(" "),s("li",[t._v("udevd：/dev管理。")]),t._v(" "),s("li",[t._v("logind：登录管理。")]),t._v(" "),s("li",[t._v("systemctl：控制/监控systemd的工具。\n"),s("ul",[s("li",[s("code",[t._v("systemctl status <service>")])]),t._v(" "),s("li",[s("code",[t._v("systemctl [start|stop] <service>")])]),t._v(" "),s("li",[s("code",[t._v("systemctl [enable|disable] <service>")]),t._v("：是否在开机时启动服务。")]),t._v(" "),s("li",[s("code",[t._v("systemctl list-units")])])])]),t._v(" "),s("li",[t._v("......")])])])]),t._v(" "),s("p",[s("strong",[t._v("Linux图形栈")]),t._v("：")]),t._v(" "),s("ul",[s("li",[t._v("概览：![[Pasted image 20230307103903.png]]")]),t._v(" "),s("li",[t._v("显示控制器支持：\n"),s("ul",[s("li",[t._v("已经废弃的Linux内核子系统：fbdev。")]),t._v(" "),s("li",[t._v("现在使用的Linux内核子系统：DRM\n"),s("ul",[s("li",[t._v("支持SoC或显卡的显示控制器，支持所有类型的显示面板和桥：parallel, LVDS, DSI, HDMI, DisplayPort, etc. 也支持通过I2C或SPI连接的显示面板。")]),t._v(" "),s("li",[t._v("设备被暴露为/dev/dri/cardX。")]),t._v(" "),s("li",[t._v("相关用户空间库：libdrm，其包含测试工具modetest。")])])])])]),t._v(" "),s("li",[t._v("GPU支持：OpenGL加速\n"),s("ul",[s("li",[t._v("开源：\n"),s("ul",[s("li",[t._v("一个在DRM子系统的内核驱动，用来向GPU发送命令、管理内存。")]),t._v(" "),s("li",[t._v("mesa3d是实现了各种OpenGL API的用户空间库，包含大量特定GPU的逻辑。")])])]),t._v(" "),s("li",[t._v("闭源：只提供实现了各种OpenGL API的二进制blob。")])])]),t._v(" "),s("li",[t._v("显示服务器：![[Pasted image 20230307110523.png]]\n"),s("ul",[s("li",[t._v("Linux内核并不处理应用程序之间对显示和输入设备的多路复用：只有一个用户空间程序可以使用显示和部分输入设备（个人理解：某个时间点只能响应一个应用）。")]),t._v(" "),s("li",[t._v("显示服务器是特殊的用户空间程序，其通过以下方式对显示和输入设备进行多路复用：\n"),s("ul",[s("li",[t._v("允许多个客户端GUI应用提交它们的窗口内容。")]),t._v(" "),s("li",[t._v("基于应用提交的内容、窗口可见性、窗口层级，组成在屏幕中的最终可见帧。")]),t._v(" "),s("li",[t._v("基于焦点，把输入事件传播到对应的客户端。")])])]),t._v(" "),s("li",[t._v("X11 and X.org：以前使用。\n"),s("ul",[s("li",[t._v("实现了X11协议，用于客户端和服务器通信（本地客户端基于UNIX socket，远程客户端基于TCP）。")]),t._v(" "),s("li",[t._v("工作在用于显卡的DRM或fbdev、用于输入事件的输入子系统之上。")])])]),t._v(" "),s("li",[t._v("Wayland：是显示服务器与客户端通信的通信协议，也是该协议的C库实现。\n"),s("ul",[s("li",[t._v("使用Wayland协议的显示服务器也叫Wayland compositor。\n"),s("ul",[s("li",[t._v("Weston是compositor的参考实现。")]),t._v(" "),s("li",[t._v("Mutter：GNOME桌面环境使用的。")]),t._v(" "),s("li",[t._v("wlroots：一个compositor库。")])])]),t._v(" "),s("li",[t._v("更多基于OpenGL技术。")])])])])]),t._v(" "),s("li",[t._v("图形工具包：\n"),s("ul",[s("li",[t._v("X11和Wayland协议是比较底层的协议。")]),t._v(" "),s("li",[t._v("可以存在为：![[Pasted image 20230307113626.png]]\n"),s("ul",[s("li",[t._v("工作在X11或Wayland显示服务器之上。")]),t._v(" "),s("li",[t._v("直接工作在DRM+输入之上，作为单一的全屏应用。")])])]),t._v(" "),s("li",[t._v("面向widget的工具包，包含创建窗口、按钮、文本框、拖拽列表等API。")]),t._v(" "),s("li",[t._v("面向游戏/多媒体的工具包，无预先定义的widget API。")]),t._v(" "),s("li",[t._v("Qt：\n"),s("ul",[s("li",[t._v("一个开发框架，提供了：\n"),s("ul",[s("li",[t._v("核心库：数据结构、事件处理、XML、数据库、网络等等。")]),t._v(" "),s("li",[t._v("图形库：widget等等。")])])]),t._v(" "),s("li",[t._v("标准API是用的C++，但也可绑定到其他语言。")]),t._v(" "),s("li",[t._v("可以工作为：\n"),s("ul",[s("li",[t._v("一个 使用OpenGL、DRM或没有加速的dbdev 的单一应用。")]),t._v(" "),s("li",[t._v("运行于X11或Wayland之上的多个应用。")])])]),t._v(" "),s("li",[t._v("支持多平台：Linux, MacOS, Windows.")])])]),t._v(" "),s("li",[t._v("Gtk：\n"),s("ul",[s("li",[t._v("GNOME桌面环境是以其为基础开发的。")]),t._v(" "),s("li",[t._v("由glib（核心库）、pango（文本处理）、cairo（vector graphics）、gtk（widget库）组成。")]),t._v(" "),s("li",[t._v("标准API是用的C，但也可绑定到其他语言。")]),t._v(" "),s("li",[t._v("需要X11或Wayland显示服务器才能工作。")]),t._v(" "),s("li",[t._v("支持多平台：Linux, MacOS, Windows.")])])]),t._v(" "),s("li",[t._v("Flutter：\n"),s("ul",[s("li",[t._v("跨平台UI应用开发：Linux, Android, iOS, Windows, MacOS")]),t._v(" "),s("li",[t._v("Google开发和维护。")]),t._v(" "),s("li",[t._v("使用Dart开发应用。")]),t._v(" "),s("li",[t._v("应用可运行在Dart虚拟机，或者为了更好性能，进行原始编译。")])])]),t._v(" "),s("li",[t._v("SDL：\n"),s("ul",[s("li",[t._v("一个跨平台开发库，提供对音频、键盘、鼠标、触摸屏、图形硬件的底层访问。")]),t._v(" "),s("li",[t._v("用C语言实现的。")]),t._v(" "),s("li",[t._v("没有提供widget库。")]),t._v(" "),s("li",[t._v("多用于游戏、媒体播放器、定制UI。")])])]),t._v(" "),s("li",[t._v("Enlightenment Foundation Libraries (EFL) / Elementary；LVGL；Ensemble")])])])]),t._v(" "),s("p",[s("strong",[t._v("多媒体栈")]),t._v("：")]),t._v(" "),s("ul",[s("li",[t._v("概览：![[Pasted image 20230307115054.png]]")]),t._v(" "),s("li",[t._v("音频栈：\n"),s("ul",[s("li",[t._v("内核端：ALSA子系统（Advanced Linux Sound Architecture），包括用于音频接口和音频编码的驱动，对上层暴露音频设备到/dev/snd/。")]),t._v(" "),s("li",[t._v("相应用户空间库：alsa-lib。")]),t._v(" "),s("li",[t._v("音频服务器：\n"),s("ul",[s("li",[t._v("当多个应用共享音频设备时需要音频服务器：混合音频流，从指定应用路由音频流到指定设备。")]),t._v(" "),s("li",[t._v("JACK：主要用于专业音频。")]),t._v(" "),s("li",[t._v("pulseaudio：主要用于普通桌面Linux音频。")]),t._v(" "),s("li",[t._v("pipewire：JACK和pulseaudio的替代方案。")])])])])]),t._v(" "),s("li",[t._v("视频栈：\n"),s("ul",[s("li",[t._v("内核端：Video4Linux子系统，简称V4L。\n"),s("ul",[s("li",[t._v("支持摄像机设备：webcams、SoC的摄像机接口，摄像机传感器(parallel, CSI, etc.)")]),t._v(" "),s("li",[t._v("也被用来支持视频编解码硬件加速：H264, H265, etc.")]),t._v(" "),s("li",[t._v("对上层暴露视频设备到/dev/videoX。")])])]),t._v(" "),s("li",[t._v("以前的用户空间库：libv4l")]),t._v(" "),s("li",[t._v("新的用户空间库，更多功能：libcamera")])])]),t._v(" "),s("li",[t._v("GStreamer：\n"),s("ul",[s("li",[t._v("是用于构造 关于媒体处理组件 图形的库。")]),t._v(" "),s("li",[t._v("允许创建流水线来变换、转换、流化、显示、剪切多媒体流，包括音频和视频。![[Pasted image 20230307163250.png]]")]),t._v(" "),s("li",[t._v("由大量插件组成：视频剪切/显示，音频剪切/重放，编解码，缩放，滤波等等。")])])])]),t._v(" "),s("p",[s("strong",[t._v("网络栈")]),t._v("：")]),t._v(" "),s("ul",[s("li",[t._v("概览：![[Pasted image 20230307163556.png]]")]),t._v(" "),s("li",[t._v("Web accessible UI：\n"),s("ul",[s("li",[t._v("在嵌入式系统，使用web接口来进行设备配置/监控 很常见。")]),t._v(" "),s("li",[t._v("需要web服务器：简单需求用Busybox httpd，复杂需求用lighttpd, nginx, apache。")]),t._v(" "),s("li",[t._v("可以使用PHP，nodeJS或其他解释性语言，或者简单的CGI shell脚本。")])])]),t._v(" "),s("li",[t._v("Web浏览器：渲染引擎\n"),s("ul",[s("li",[t._v("WebKit：\n"),s("ul",[s("li",[t._v("由Apple发起，用在iOS，Safari")]),t._v(" "),s("li",[t._v("被集成在Gtk："),s("a",{attrs:{href:"https://webkitgtk.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("WebKitGTK"),s("OutboundLink")],1)]),t._v(" "),s("li",[t._v("被集成在Qt："),s("a",{attrs:{href:"https://wiki.qt.io/Qt_WebKit",target:"_blank",rel:"noopener noreferrer"}},[t._v("QtWebKit"),s("OutboundLink")],1)]),t._v(" "),s("li",[t._v("为嵌入式设备优化过的："),s("a",{attrs:{href:"https://wpewebkit.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("WPE WebKit"),s("OutboundLink")],1)])])]),t._v(" "),s("li",[t._v("Blink：\n"),s("ul",[s("li",[t._v("由WebKit分叉出来。")]),t._v(" "),s("li",[t._v("由Google开发，用于chrome")]),t._v(" "),s("li",[t._v("被集成在Qt："),s("a",{attrs:{href:"https://wiki.qt.io/QtWebEngine",target:"_blank",rel:"noopener noreferrer"}},[t._v("QtWebEngine"),s("OutboundLink")],1)]),t._v(" "),s("li",[t._v("被"),s("a",{attrs:{href:"https://www.electronjs.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Electron"),s("OutboundLink")],1),t._v("使用。")])])])])]),t._v(" "),s("li",[t._v("基于Web的UI：\n"),s("ul",[s("li",[t._v("运行一个全屏的web浏览器。")]),t._v(" "),s("li",[t._v("方案：\n"),s("ul",[s("li",[s("a",{attrs:{href:"https://github.com/Igalia/cog",target:"_blank",rel:"noopener noreferrer"}},[t._v("Cog"),s("OutboundLink")],1),t._v("：一个用于"),s("a",{attrs:{href:"https://wpewebkit.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("WPE WebKit"),s("OutboundLink")],1),t._v(" port的简单launcher。")]),t._v(" "),s("li",[s("a",{attrs:{href:"https://www.electronjs.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Electron"),s("OutboundLink")],1),t._v("：把带有web渲染引擎的nodeJS应用 打包进独立应用中。")])])]),t._v(" "),s("li",[t._v("注意占用空间和性能影响：web渲染引擎很吃资源。")])])]),t._v(" "),s("li",[t._v("Linux实现的是链路层、网络层和传输层这三层。![[Pasted image 20230315105124.png]]\n"),s("ul",[s("li",[t._v("网卡驱动实现链路层协议。代码在driver/net/ethernet目录。")]),t._v(" "),s("li",[t._v("内核协议栈来实现网络层和传输层。内核对更上层的应用层提供socket接口来供用户进程访问。代码位于"),s("code",[t._v("kernel")]),t._v("和"),s("code",[t._v("net")]),t._v("目录。")]),t._v(" "),s("li",[t._v("内核和网络设备驱动是通过[[中断]]的方式来处理的。当设备上有数据到达的时候，会给CPU的相关引脚上触发一个电压变化，以通知CPU来处理数据。对于网络模块来说，由于处理过程比较复杂和耗时，如果在中断函数中完成所有的处理，将会导致中断处理函数（优先级过高）将过度占据CPU，将导致CPU无法响应其它设备，例如鼠标和键盘的消息。因此Linux中断处理函数是分上半部和下半部的。上半部是只进行最简单的工作，快速处理然后释放CPU，接着CPU就可以允许其它中断进来。剩下将绝大部分的工作都放到下半部中，可以慢慢从容处理。2.4以后的内核版本采用的下半部实现方式是软中断，由"),s("em",[t._v("ksoftirqd")]),t._v("内核线程全权处理。和硬中断不同的是，"),s("strong",[t._v("硬中断")]),t._v("是通过给CPU物理引脚施加电压变化，而"),s("strong",[t._v("软中断")]),t._v("是通过给内存中的一个变量的二进制值以通知软中断处理程序。")])])])]),t._v(" "),s("p",[s("strong",[t._v("Linux IO 栈")]),t._v("：![[Pasted image 20230315083153.png]] ^7d25c1")]),t._v(" "),s("ul",[s("li",[t._v("C函数库：选择 IO 引擎。![[Pasted image 20230315083259.png]]")]),t._v(" "),s("li",[t._v("系统调用：将内核中其它组件的功能进行封装，然后通过接口的形式暴露给用户进程来访问。")]),t._v(" "),s("li",[t._v("VFS 虚拟文件系统：在 Linux 上抽象一个通用的文件系统模型，对我们开发人员或者是用户提供一组通用的接口，让我们不用 care 具体文件系统的实现。\n"),s("ul",[s("li",[t._v("核心数据结构有四个：![[Pasted image 20230315083726.png]]\n"),s("ul",[s("li",[t._v("superblock：Linux 用来标注具体已安装的文件系统的有关信息。")]),t._v(" "),s("li",[t._v("inode：Linux 中的每一个文件/目录都有一个 inode，记录其权限、修改时间等信息。")]),t._v(" "),s("li",[t._v("desty：目录项，是路径中的一部分，所有的目录项对象串起来就是一棵 Linux 下的目录树。")]),t._v(" "),s("li",[t._v("file：文件对象，用来和打开它的进程进行交互。")])])]),t._v(" "),s("li",[t._v("围绕这这四个核心数据结构，VFS 也都定义了一系列的操作方法。比如，inode 的操作方法定义 "),s("code",[t._v("inode_operations")]),t._v("，在它的里面定义了我们非常熟悉的 "),s("code",[t._v("mkdir")]),t._v(" 和 "),s("code",[t._v("rename")]),t._v(" 等。对于 file 对象，定义了对应的操作方法 "),s("code",[t._v("file_operations")]),t._v(" ，如下：")])]),t._v(" "),s("div",{staticClass:"language-C line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// include/linux/fs.h  ")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("file")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  \n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("  \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("file_operations")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("f_op  \n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("  \n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("file_operations")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  \n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("  \n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ssize_t")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("read"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("file")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" __user "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("size_t")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("loff_t")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ssize_t")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("write"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("file")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" __user "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("size_t")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("loff_t")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("  \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("mmap"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("file")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("vm_area_struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("open"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("inode")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("file")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("flush"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("file")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("fl_owner_t")]),t._v(" id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br")])]),s("ul",[s("li",[s("strong",[t._v("注意 VFS 是抽象的")]),t._v("，所以它的 file_operations 里定义的 read、write 都只是函数指针， 实际中需要具体的文件系统来实现，例如 ext4 等等。")])])]),t._v(" "),s("li",[t._v("Page Cache：页高速缓存。它是 Linux 内核使用的主要磁盘高速缓存，是一个纯内存的工作组件。Linux 内核使用搜索树来高效管理大量的页面。\n"),s("ul",[s("li",[t._v("有了它，Linux 就可以把一些磁盘上的文件数据保留在内存中，然后来给访问相对比较慢的磁盘来进行访问加速。")]),t._v(" "),s("li",[t._v("当用户要访问的文件的时候，如果要访问的文件 block 正好存在于 Page Cache 内，那么 Page Cache 组件直接把数据从内核态拷贝到用户进程的内存中就可以了。如果不存在，那么会申请一个新页，发出"),s("em",[t._v("缺页中断")]),t._v("，然后用磁盘读取到的 block 内容来填充它 ，下次直接使用。")]),t._v(" "),s("li",[t._v("有一种情况下，Pagecache 不会生效， 那就是你设置了 DIRECT_IO 标志。")])])]),t._v(" "),s("li",[t._v("文件系统：提供对 VFS 的具体实现。除了数据结构，每个文件系统还会定义自己的实际操作函数。例如在 ext4 中定义的 ext4_file_operations。在其中包含的VFS中定义的 read 函数的具体实现：do_sync_read 和 do_sync_write。"),s("div",{staticClass:"language-C line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("file_operations")]),t._v(" ext4_file_operations "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  \n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("llseek         "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ext4_llseek"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  \n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("read           "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" do_sync_read"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  \n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("write          "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" do_sync_write"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  \n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("aio_read       "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" generic_file_aio_read"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  \n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("aio_write      "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ext4_file_write"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  \n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("  \n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br")])])]),t._v(" "),s("li",[t._v("对上层的文件系统，通用块层提供一个统一的接口让供文件系统实现者使用，而不用关心不同设备驱动程序的差异，这样实现出来的文件系统就能用于任何的块设备。通过对设备进行抽象后，不管是磁盘还是机械硬盘，对于文件系统都可以使用相同的接口对逻辑数据块进行读写操作。\n"),s("ul",[s("li",[t._v("对下层。I/O 请求添加到设备的 I/O 请求队列。它定义了一个叫 bio 的数据结构来表示一次 IO 操作请求（include/linux/bio.h）")])])]),t._v(" "),s("li",[t._v("当通用块层把 IO 请求实际发出以后，并不一定会立即被执行。因为调度层会从全局出发，尽量让整体磁盘 IO 性能最大化。\n"),s("ul",[s("li",[t._v("对于机械硬盘来说，调度层会尽量让磁头类似电梯那样工作，先往一个方向走，到头再回来，这样整体效率会比较高一些。具体的算法有 deadline 和 cfg。")]),t._v(" "),s("li",[t._v("固态硬盘可以直接使用最简单的 noop 调度器。")]),t._v(" "),s("li",[t._v("通过"),s("code",[t._v("dmesg | grep -i scheduler")]),t._v("来查看你的 Linux 支持的调度算法。")])])]),t._v(" "),s("li",[t._v("通用块层和 IO 调度层一起为上层文件系统屏蔽了底层各种不同的硬盘、U盘的设备差异。")]),t._v(" "),s("li",[t._v("整个 IO 过程中涉及到了好几个内核组件。而每个组件之间都是采用不同长度的块来管理磁盘数据的。 ^455080\n"),s("ul",[s("li",[t._v("Page Cache 是以页为单位的，Linux 页大小一般是 4KB")]),t._v(" "),s("li",[t._v("文件系统是以块(block)为单位来管理的。使用 "),s("code",[t._v("dumpe2fs")]),t._v(" 可以查看，一般一个块默认是 4KB")]),t._v(" "),s("li",[t._v("通用块层是以段为单位来处理磁盘 IO 请求的，一个段为一个页或者是页的一部分")]),t._v(" "),s("li",[t._v("IO 调度程序通过 DMA 方式传输 N 个扇区到内存，扇区一般为 512 字节")]),t._v(" "),s("li",[t._v("硬盘也是采用“扇区”的管理和传输数据的")])])]),t._v(" "),s("li",[t._v("写操作最终调用到"),s("code",[t._v("__block_commit_write")]),t._v("中，只是make dirty。然后大部分情况下你的函数调用就返回了，数据现在还在内存中的Page Cache里，并没有真正写到硬盘。 ^170e60\n"),s("ul",[s("li",[t._v("虽然绝大部分情况下，都是直接写到Page Cache里就返回了。但在一种情况下，用户进程必须得等待写入完成才可以返回，那就是对balance_dirty_pages_ratelimited的判断如果超出限制了。该函数判断当前脏页是否已经超过脏页上限dirty_bytes、dirty_ratio，超过了就必须得等待。这两个参数只有一个会生效，另外1个是0。\n"),s("ul",[s("li",[t._v("查看：cat /proc/sys/vm/dirty_ratio，cat /proc/sys/vm/dirty_bytes")])])]),t._v(" "),s("li",[t._v("写硬盘操作是由worker内核线程周期性执行的，它的周期取决于内核参数dirty_writeback_centisecs（本人机器是5s）的设置，cat /proc/sys/vm/dirty_writeback_centisecs")])])])])])}),[],!1,null,null,null);s.default=e.exports}}]);